
本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印
*****
 ***
  *
 ***
*****
所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。

给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。

输入格式：
输入在一行给出1个正整数N（<=1000）和一个符号，中间以空格分隔。
输出格式：
首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。

输入样例：
19 *
输出样例：
*****
 ***
  *
 ***
*****
2

code:

#include <iostream>
using namespace std;
int main() {
	int n; char c;
	cin >> n >> c;
	int row = 0; //行
	for (int i = 0; i < n; i++) {
		if ((2 * i*(i + 2) + 1) > n) { // 也就是 2 * 上半部分的总数 + 1 = 总共使用字符个数 > 总个数n 
			row = i - 1;
			break;
		}
	}
	for (int i = row; i >= 1; i--) {
		for (int k = row - i; k >= 1; k--) //每行空格数 = 总行数 - 当前行数
			cout << ' ';
		for (int j = i * 2 + 1; j >= 1; j--)  //共打印 当前行数*2+1 个字符
			cout << c;
		cout << endl;
	}
	for (int i = 0; i < row; i++) //打印沙漏对称中心点
		cout << " ";
	cout << c << endl;
	for (int i = 1; i <= row; i++) { //打印对称的下半部分
		for (int k = row - i; k >= 1; k--)
			cout << ' ';
		for (int j = i * 2 + 1; j >= 1; j--) 
			cout << c;
		cout << endl;
	}
	int r = n - (2 * row*(row + 2) + 1); //剩下的
	cout << r;
	return 0;
}
